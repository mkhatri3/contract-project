openapi: 3.0.0
info:
  title: Product Management API (Fake)
  description: A fake API for managing products, demonstrating basic CRUD operations.
  version: 1.0.0
servers:
  - url: https://api.example.com/v1
    description: Production server
  - url: http://localhost:8080/v1
    description: Development server

tags:
  - name: Products
    description: Operations related to product management

paths:
  /products:
    get:
      summary: Get all products
      operationId: getAllProducts
      tags:
        - Products
      responses:
        '200':
          description: A list of products
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Add a new product
      operationId: addProduct
      tags:
        - Products
      requestBody:
        description: Product object to add
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductCreate'
      responses:
        '201':
          description: Product created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /products/{productId}:
    get:
      summary: Get a product by ID
      operationId: getProductById
      tags:
        - Products
      parameters:
        - name: productId
          in: path
          description: ID of the product to retrieve
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: A single product
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update an existing product
      operationId: updateProduct
      tags:
        - Products
      parameters:
        - name: productId
          in: path
          description: ID of the product to update
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: Product object with updated fields
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductUpdate'
      responses:
        '200':
          description: Product updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete a product
      operationId: deleteProduct
      tags:
        - Products
      parameters:
        - name: productId
          in: path
          description: ID of the product to delete
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Product deleted successfully
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  schemas:
    Product:
      type: object
      required:
        - id
        - name
        - price
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the product
          example: d290f1ee-6c54-4b01-90e6-d701748f0851
        name:
          type: string
          description: Name of the product
          example: Wireless Mouse
        description:
          type: string
          description: Detailed description of the product
          example: Ergonomic wireless mouse with customisable buttons.
        price:
          type: number
          format: float
          description: Price of the product
          example: 29.99
        currency:
          type: string
          description: Currency of the price
          example: USD
          default: USD
        createdAt:
          type: string
          format: date-time
          description: Timestamp when the product was created
          example: '2023-10-27T10:00:00Z'
        updatedAt:
          type: string
          format: date-time
          description: Timestamp when the product was last updated
          example: '2023-10-27T10:30:00Z'

    ProductCreate:
      type: object
      required:
        - name
        - price
      properties:
        name:
          type: string
          description: Name of the product
          example: Mechanical Keyboard
        description:
          type: string
          description: Detailed description of the product
          example: High-quality mechanical keyboard with RGB lighting.
        price:
          type: number
          format: float
          description: Price of the product
          example: 99.99
        currency:
          type: string
          description: Currency of the price
          example: USD
          default: USD

    ProductUpdate:
      type: object
      properties:
        name:
          type: string
          description: Updated name of the product
          example: Mechanical Keyboard Pro
        description:
          type: string
          description: Updated detailed description of the product
          example: High-quality mechanical keyboard with RGB lighting and extra macro keys.
        price:
          type: number
          format: float
          description: Updated price of the product
          example: 109.99
        currency:
          type: string
          description: Updated currency of the price
          example: EUR

    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
          description: Error code
          example: 400
        message:
          type: string
          description: Detailed error message
          example: Invalid input provided.
